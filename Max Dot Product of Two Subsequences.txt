class Solution {
public:
    int maxDotProduct(vector<int>& nums1, vector<int>& nums2) {
        int n = nums1.size();
        int m = nums2.size();
        
        vector<vector<int>> dp(n, vector<int>(m));
        
        // Initialize the DP array
        dp[0][0] = nums1[0] * nums2[0];
        int maxProduct = dp[0][0];
        
        // Fill in the first row
        for (int j = 1; j < m; ++j) {
            dp[0][j] = max(dp[0][j - 1], nums1[0] * nums2[j]);
            maxProduct = max(maxProduct, dp[0][j]);
        }
        
        // Fill in the first column
        for (int i = 1; i < n; ++i) {
            dp[i][0] = max(dp[i - 1][0], nums1[i] * nums2[0]);
            maxProduct = max(maxProduct, dp[i][0]);
        }
        
        // Fill in the rest of the DP array
        for (int i = 1; i < n; ++i) {
            for (int j = 1; j < m; ++j) {
                dp[i][j] = max(nums1[i] * nums2[j], dp[i - 1][j - 1] + nums1[i] * nums2[j]);
                dp[i][j] = max(dp[i][j], dp[i - 1][j]);
                dp[i][j] = max(dp[i][j], dp[i][j - 1]);
                maxProduct = max(maxProduct, dp[i][j]);
            }
        }
        
        return maxProduct;
    }
};
